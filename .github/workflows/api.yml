name: ApiPipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: ls -la

      - name: Install dependencies
        run: |
          npm install -g yarn
          yarn install

      - name: Validate ESlint
        run: |
          yarn lint --fix

      - name: Format the code
        run: |
          yarn format

      - name: Build
        run: |
          yarn build
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: ls -la

      - name: Install dependencies
        run: |
          npm install -g yarn
          yarn install

      - name: Prepare .env to test
        run: |
          touch .env
          echo PORT=3030 >> .env
          echo SECRET=GSJFDHG827FSDBNGLKWY0R982423TKJGHWS98R7-254 >> .env
          echo DATABASE_URL="file:./dev.sqlite" >> .env
          echo APP_ENV=dev >> .env
          echo RESEND_SECRET=${{ secrets.RESEND_TOKEN }} >> .env

      - name: Prepare Prisma to test
        run: |
          npx prisma generate --schema ./test/prisma/schema-test.prisma
          npx prisma db push --schema ./test/prisma/schema-test.prisma

      - name: Test
        run: |
          yarn test:e2e
  deploy:
    # needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    environment: main

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: ls -la

      - name: Install dependencies
        run: |
          npm install -g yarn
          yarn install

      - name: Prepare .env to deploy
        run: |
          touch .env
          echo PORT=3030 >> .env
          echo SECRET=GSJFDHG827FSDBNGLKWY0R982423TKJGHWS98R7-254 >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo APP_ENV=prod >> .env
          echo RESEND_SECRET=${{ secrets.RESEND_TOKEN }} >> .env

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Auth Docker client
        run: aws ecr get-login-password --region us-east-1 | docker login --username ${{ secrets.AWS_USER }} --password-stdin ${{ secrets.AWS_PASSWORD }}

      - name: Build Docker image
        run: docker build -t avt-api .

      - name: Version Docker image
        run: docker tag avt-api:latest ${{ secrets.AWS_REPOSITORY }}/avt-api:latest

      - name: Push Docker image to AWS
        run: |
          docker push ${{ secrets.AWS_REPOSITORY }}/avt-api:latest
